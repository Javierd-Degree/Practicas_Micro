;**************************************************************************
; SBM 2019. Programa pract1a.asm
; Grupo 2301
; Javier Delgado del Cerro y Javier López Cano
;**************************************************************************
; DEFINICION DEL SEGMENTO DE DATOS
DATOS SEGMENT 
	TEMP DB 40 DUP(?)
	CURRENT DW 10h
	COD DB "cod$"
	DECOD DB "decod$"
	QUIT DB "quit$"
	CLR_PANT 	DB 	1BH,"[2","J$"
DATOS ENDS

;**************************************************************************
; DEFINICION DEL SEGMENTO DE PILA
PILA SEGMENT STACK "STACK"
	DB 40H DUP (0) ;ejemplo de inicialización, 64 bytes inicializados a 0
PILA ENDS

;**************************************************************************
; DEFINICION DEL SEGMENTO EXTRA
EXTRA SEGMENT
	RESULT DW 0,0 ;ejemplo de inicialización. 2 PALABRAS (4 BYTES)
EXTRA ENDS

;**************************************************************************
; DEFINICION DEL SEGMENTO DE CODIGO
CODE SEGMENT
ASSUME CS: CODE, DS:DATOS, ES:EXTRA, SS:PILA
			

INICIO PROC	
	; INICIALIZA LOS REGISTROS DE SEGMENTO CON SU VALOR
	MOV AX, DATOS
	MOV DS, AX
	MOV AX, PILA
	MOV SS, AX
	MOV AX, EXTRA
	MOV ES, AX
	MOV SP, 64 ; CARGA EL PUNTERO DE PILA CON EL VALOR MAS ALTO
	; FIN DE LAS INICIALIZACIONES
	; COMIENZO DEL PROGRAMA
	MOV BX, OFFSET QUIT

	BUCLE_READ:	
	;MOV AH, 9h
	;MOV DX, OFFSET CLR_PANT
	;INT 21H
	CALL READ	

	PUSH BX
	CALL CHECK_STR
	CMP AX, 1
	JE ENDING		

	CMP WORD PTR CURRENT, 10h
	JNZ CALL_2

	CALL_1:
	MOV CX, OFFSET DECOD
	JMP FUNCT_CALL

	CALL_2:
	MOV CX, OFFSET COD

	FUNCT_CALL:
	PUSH CX
	CALL CHECK_STR

	CMP AX, 1
	JE CHANGE

	MOV DX, OFFSET TEMP
	INC DX 
	INC DX
	MOV AH, BYTE PTR CURRENT
	INT 57h 
	JMP BUCLE_READ

	CHANGE:
	CMP CURRENT, 10h
	JNE OPT_2
	MOV CURRENT, 11h
	JMP BUCLE_READ
	OPT_2:
	MOV CURRENT, 10h
	JMP BUCLE_READ
	
	ENDING:	
	MOV AX, 4C00h
	INT 21h
INICIO ENDP


READ PROC NEAR
	PUSH DX 	
	; Leemos la linea entera introducida por teclado
	MOV AH, 0Ah
	MOV DX, OFFSET TEMP
	MOV TEMP[0], 40
	INT 21H
	
	POP DX
	RET	
READ ENDP

CHECK_STR PROC NEAR
	PUSH BP
	MOV BP, SP
	PUSH BX CX SI 
	
	MOV BX, [BP + 4]
	
	XOR SI, SI
	XOR AX, AX
	BUCLE:
	MOV BP, DX		;; ¿¿¿ QUE HAY EN DX????
	MOV CH, TEMP[SI + 2]
	MOV CL, [BX + SI]
	CMP CH, CL
	JNZ FIN_VALOR
	INC SI
	JMP BUCLE
	
	FIN_VALOR:
	CMP CH, 13
	JNZ FIN
	CMP CL, '$'
	JNZ FIN
	MOV AX, 1
	
	FIN:
	POP SI CX BX BP
	RET
CHECK_STR ENDP
CODE ENDS
END INICIO